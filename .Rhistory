C = c(.15,.2,.25),
scale = c(.5,.55,.6))
)
logFit <- train(Purchase ~ .,  data=training, method="glm", family="binomial",trControl = fitControl,metric = "ROC")
summary(logFit)
names(train)
names(training)
summary(logFit)
results<-resamples(list(Logstic=logFit,svmRadial=svmFit1,svmRadialCost=svmFit2,svmPoly=svmFit3))
summary(results)
bwplot(results)
ggplot(data = results) +
geom_boxplot() +
coord_flip()
bwplot(results)
names(training)
####################
#Quick Look at Data#
####################
summary(df)
############
#Clean Data#
############
F=c('WeekofPurchase', 'SpecialCH','SpecialMM','STORE','StoreID') # categorical variables are converted into factors
for(i in F) df[,i]=as.factor(df[,i])
##################################
#Check for Constants & Duplicates#
##################################
constant_cols <- whichAreConstant(df)
double_cols <- whichAreInDouble(df)
bijections_cols <- whichAreBijection(df)
df <-df [,-c('STORE','Store7')]
##############################################
#Split Data into Testing and Training Dataset#
##############################################
training <- df[ inTraining,]
testing  <- df[-inTraining,]
##############
##Scale Data##
##############
scales <- build_scales(dataSet = training, cols = c("PriceCH", "PriceMM","DiscCH","DiscMM","SalePriceMM","SalePriceCH","PriceDiff","PctDiscMM","PctDiscCH","ListPriceDiff"), verbose = TRUE)
training <- fastScale(dataSet = training, scales = scales, verbose = TRUE)
testing <- fastScale(dataSet = testing, scales = scales, verbose = TRUE)
##############################
#Encode Categorical Variables#
##############################
encoding <- build_encoding(dataSet = training[,-c('Purchase')], cols = "auto", verbose = TRUE)
training <- one_hot_encoder(dataSet = training, encoding = encoding, drop = TRUE, verbose = TRUE)
testing <- one_hot_encoder(dataSet = testing, encoding = encoding, drop = TRUE, verbose = TRUE)
bijections_cols <- whichAreBijection(training)
training = training[,-c('SpecialCH.0','SpecialMM.0')]
testing = testing[,-c('SpecialCH.0','SpecialMM.0')]
training <- sameShape(training, referenceSet = testing, verbose = TRUE)
####################
#Quick Look at Data#
####################
summary(df)
############
#Clean Data#
############
F=c('WeekofPurchase', 'SpecialCH','SpecialMM','STORE','StoreID') # categorical variables are converted into factors
for(i in F) df[,i]=as.factor(df[,i])
F=c('WeekofPurchase', 'SpecialCH','SpecialMM','STORE','StoreID') # categorical variables are converted into factors
for(i in F) df[,i]=as.factor(df[,i])
############
#Clean Data#
############
F=c('WeekofPurchase', 'SpecialCH','SpecialMM','STORE') # categorical variables are converted into factors
for(i in F) df[,i]=as.factor(df[,i])
for(i in F) df[i]=as.factor(df[i])
for(columnName in F) df[columnName]=as.factor(df[columnName])
for(columnName in F) {
df[columnName]=as.factor(df[columnName])
}
for(columnName in F) {
df[,columnName]=as.factor(df[,columnName])
}
for(columnName in F) {
df[,c(columnName)]=as.factor(df[,c(columnName)])
}
############
#Clean Data#
############
F=c('WeekofPurchase', 'SpecialCH','SpecialMM','STORE','StoreID) # categorical variables are converted into factors
for(columnName in F) {
df[,c(columnName)]=as.factor(df[,c(columnName)])
}
inTraining <- createDataPartition(df$Purchase, p = .8, list = FALSE)
df$Purchase<-as.character(df$Purchase)
df$Purchase[df$Purchase=="MM"] <- 'Yes'
############
#Clean Data#
############
F=c('WeekofPurchase', 'SpecialCH','SpecialMM','STORE','StoreID') # categorical variables are converted into factors
for(columnName in F) {
df[,c(columnName)]=as.factor(df[,c(columnName)])
}
inTraining <- createDataPartition(df$Purchase, p = .8, list = FALSE)
df$Purchase<-as.character(df$Purchase)
df$Purchase[df$Purchase=="MM"] <- 'Yes'
df$Purchase[df$Purchase=="CH"] <- 'No'
##################################
#Check for Constants & Duplicates#
##################################
constant_cols <- whichAreConstant(df)
double_cols <- whichAreInDouble(df)
bijections_cols <- whichAreBijection(df)
df <-df [,-c('STORE','Store7')]
##############################################
#Split Data into Testing and Training Dataset#
##############################################
training <- df[ inTraining,]
testing  <- df[-inTraining,]
##############
##Scale Data##
##############
scales <- build_scales(dataSet = training, cols = c("PriceCH", "PriceMM","DiscCH","DiscMM","SalePriceMM","SalePriceCH","PriceDiff","PctDiscMM","PctDiscCH","ListPriceDiff"), verbose = TRUE)
training <- fastScale(dataSet = training, scales = scales, verbose = TRUE)
testing <- fastScale(dataSet = testing, scales = scales, verbose = TRUE)
##############################
#Encode Categorical Variables#
##############################
encoding <- build_encoding(dataSet = training[,-c('Purchase')], cols = "auto", verbose = TRUE)
training <- one_hot_encoder(dataSet = training, encoding = encoding, drop = TRUE, verbose = TRUE)
testing <- one_hot_encoder(dataSet = testing, encoding = encoding, drop = TRUE, verbose = TRUE)
bijections_cols <- whichAreBijection(training)
training = training[,-c('SpecialCH.0','SpecialMM.0')]
testing = testing[,-c('SpecialCH.0','SpecialMM.0')]
training <- sameShape(training, referenceSet = testing, verbose = TRUE)
####################
#Quick Look at Data#
####################
summary(df)
############
#Clean Data#
############
F=c('WeekofPurchase', 'SpecialCH','SpecialMM','STORE','StoreID') # categorical variables are converted into factors
for(columnName in F) {
df[,c(columnName)]=as.factor(df[,c(columnName)])
}
inTraining <- createDataPartition(df$Purchase, p = .8, list = FALSE)
df$Purchase<-as.character(df$Purchase)
df$Purchase[df$Purchase=="MM"] <- 'Yes'
df$Purchase[df$Purchase=="CH"] <- 'No'
df$Purchase<-as.factor(df$Purchase)
##################################
#Check for Constants & Duplicates#
##################################
constant_cols <- whichAreConstant(df)
double_cols <- whichAreInDouble(df)
bijections_cols <- whichAreBijection(df)
df <-df [,-c('STORE','Store7','WeekofPurchase)]
constant_cols <- whichAreConstant(df)
double_cols <- whichAreInDouble(df)
bijections_cols <- whichAreBijection(df)
summary(df)
df<-read.csv(url("http://data.mishra.us/files/OJ.csv"))
F=c('WeekofPurchase', 'SpecialCH','SpecialMM','STORE','StoreID')
summary(df)
for(columnName in F) {
df[columnName]=as.factor(df[columnName])
}
F=c('WeekofPurchase', 'SpecialCH','SpecialMM','STORE','StoreID') # categorical variables are converted into factors
for(columnName in F) {
df[columnName]=as.factor(df[columnName])
}
for(columnName in F) {
df['WeekofPurchase']<-as.factor(df['WeekofPurchase'])
}
df['WeekofPurchase']<-as.factor(df['WeekofPurchase'])
df['WeekofPurchase']
df$WeekofPurchase<as.factor(df$WeekofPurchase)
df<-read.csv(url("http://data.mishra.us/files/OJ.csv"))
####################
#Quick Look at Data#
####################
summary(df)
############
#Clean Data#
############
F=c('WeekofPurchase', 'SpecialCH','SpecialMM','STORE','StoreID') # categorical variables are converted into factors
df$WeekofPurchase<as.factor(df$WeekofPurchase)
df$SpecialCH<as.factor(df$SpecialCH)
df$SpecialMM<as.factor(df$SpecialMM)
df$STORE<as.factor(df$STORE)
df$StoreID<as.factor(df$StoreID)
inTraining <- createDataPartition(df$Purchase, p = .8, list = FALSE)
df$Purchase<-as.character(df$Purchase)
df$Purchase[df$Purchase=="MM"] <- 'Yes'
df$Purchase[df$Purchase=="CH"] <- 'No'
df$Purchase<-as.factor(df$Purchase)
summary(df)
df$WeekofPurchase<as.factor(df$WeekofPurchase)
df$SpecialCH<as.factor(df$SpecialCH)
df$SpecialMM<as.factor(df$SpecialMM)
df$STORE<as.factor(df$STORE)
df$StoreID<as.factor(df$StoreID)
####################
#Quick Look at Data#
####################
summary(df)
############
#Clean Data#
############
F=c('WeekofPurchase', 'SpecialCH','SpecialMM','STORE','StoreID') # categorical variables are converted into factors
df$WeekofPurchase<-as.factor(df$WeekofPurchase)
df$SpecialCH<-as.factor(df$SpecialCH)
df$SpecialMM<-as.factor(df$SpecialMM)
df$STORE<-as.factor(df$STORE)
df$StoreID<-as.factor(df$StoreID)
inTraining <- createDataPartition(df$Purchase, p = .8, list = FALSE)
df$Purchase<-as.character(df$Purchase)
df$Purchase[df$Purchase=="MM"] <- 'Yes'
df$Purchase[df$Purchase=="CH"] <- 'No'
df$Purchase<-as.factor(df$Purchase)
summary(df)
inTraining <- createDataPartition(df$Purchase, p = .8, list = FALSE)
df$Purchase<-as.character(df$Purchase)
df$Purchase[df$Purchase=="MM"] <- 'Yes'
df$Purchase[df$Purchase=="CH"] <- 'No'
df$Purchase<-as.factor(df$Purchase)
##################################
#Check for Constants & Duplicates#
##################################
constant_cols <- whichAreConstant(df)
double_cols <- whichAreInDouble(df)
bijections_cols <- whichAreBijection(df)
df <-df [,-c('STORE','Store7','WeekofPurchase')]
##############################################
#Split Data into Testing and Training Dataset#
##############################################
training <- df[ inTraining,]
testing  <- df[-inTraining,]
##############
##Scale Data##
##############
scales <- build_scales(dataSet = training, cols = c("PriceCH", "PriceMM","DiscCH","DiscMM","SalePriceMM","SalePriceCH","PriceDiff","PctDiscMM","PctDiscCH","ListPriceDiff"), verbose = TRUE)
training <- fastScale(dataSet = training, scales = scales, verbose = TRUE)
testing <- fastScale(dataSet = testing, scales = scales, verbose = TRUE)
##############################
#Encode Categorical Variables#
##############################
encoding <- build_encoding(dataSet = training[,-c('Purchase')], cols = "auto", verbose = TRUE)
training <- one_hot_encoder(dataSet = training, encoding = encoding, drop = TRUE, verbose = TRUE)
testing <- one_hot_encoder(dataSet = testing, encoding = encoding, drop = TRUE, verbose = TRUE)
bijections_cols <- whichAreBijection(training)
training = training[,-c('SpecialCH.0','SpecialMM.0')]
testing = testing[,-c('SpecialCH.0','SpecialMM.0')]
training <- sameShape(training, referenceSet = testing, verbose = TRUE)
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 5,
## repeated ten times
repeats =2,
summaryFunction=twoClassSummary,
classProbs = TRUE)
#########################################
#Kernals using similar tuning parameters#
#########################################
###### SVM
svmFit1 <- train(Purchase ~ ., data = training,
method='svmRadial',
trControl = fitControl,
preProc = c("center","scale"),
metric = "ROC",
verbose = FALSE,
probability = TRUE,
tuneGrid = expand.grid(sigma = c(.01,.02,.05),
C = c(.75,1,1.5))
)
svmFit2 <- train(Purchase ~ ., data = training,
method='svmRadialCost',
trControl = fitControl,
preProc = c("center","scale"),
metric = "ROC",
verbose = FALSE,
probability = TRUE,
tuneGrid = expand.grid(
C = c(.75,1,1.5))
)
svmFit3 <- train(Purchase ~ ., data = training,
method='svmPoly',
trControl = fitControl,
preProc = c("center","scale"),
metric = "ROC",
verbose = FALSE,
probability = TRUE,
tuneGrid = expand.grid(degree = c(1,2,3),
C = c(.15,.2,.25),
scale = c(.5,.55,.6))
)
logFit <- train(Purchase ~ .,  data=training, method="glm", family="binomial",trControl = fitControl,metric = "ROC")
summary(logFit)
View(df)
View(df)
##### Logistic
logFit <- train(Purchase ~ PriceCH+PriceMM+DiscCH+DiscMM+LoyalCH+PctMM+PctCH+StoreID.1+StoreID.2+StoreID.3+StoreID.4+StoreID.7,  data=training, method="glm", family="binomial",trControl = fitControl,metric = "ROC")
##### Logistic
logFit <- train(Purchase ~ PriceCH+PriceMM+DiscCH+DiscMM+LoyalCH+PctDiscMM+PctDiscCH+StoreID.1+StoreID.2+StoreID.3+StoreID.4+StoreID.7,  data=training, method="glm", family="binomial",trControl = fitControl,metric = "ROC")
summary(logFit)
##### Logistic
logFit <- train(Purchase ~ PriceCH+PriceMM+DiscCH+DiscMM+LoyalCH+PctDiscCH+StoreID.1+StoreID.2+StoreID.3+StoreID.4+StoreID.7,  data=training, method="glm", family="binomial",trControl = fitControl,metric = "ROC")
summary(logFit)
logFit <- train(Purchase ~ PriceCH+PriceMM+DiscCH+LoyalCH+PctDiscMM+PctDiscCH+StoreID.1+StoreID.2+StoreID.3+StoreID.4+StoreID.7,  data=training, method="glm", family="binomial",trControl = fitControl,metric = "ROC")
summary(logFit)
##### Logistic
logFit <- train(Purchase ~ PriceCH+PriceMM+DiscCH+DiscMM+LoyalCH+StoreID.1+StoreID.2+StoreID.3+StoreID.4+StoreID.7,  data=training, method="glm", family="binomial",trControl = fitControl,metric = "ROC")
summary(logFit)
##### Logistic
logFit <- train(Purchase ~ PriceCH+PriceMM+DiscCH+DiscMM+LoyalCH+StoreID.1+StoreID.2+StoreID.3+StoreID.4,  data=training, method="glm", family="binomial",trControl = fitControl,metric = "ROC")
summary(logFit)
## compare Train performance across logistic and SVM
results<-resamples(list(Logstic=logFit,svmRadial=svmFit1,svmRadialCost=svmFit2,svmPoly=svmFit3))
summary(results)
bwplot(results)
## Compare Test Results
svmPred <- predict(svmFit3, newdata = testing, probability = TRUE)
confusionMatrix(data = svmPred, testing$Purchase)
logPred <- predict(logFit, newdata = testing)
confusionMatrix(data = logPred, testing$Purchae)
## compare Train performance across logistic and SVM
results<-resamples(list(Logstic=logFit,svmRadial=svmFit1,svmRadialCost=svmFit2,svmPoly=svmFit3))
summary(results)
bwplot(results)
## Compare Test Results
svmPred <- predict(svmFit3, newdata = testing, probability = TRUE)
confusionMatrix(data = svmPred, testing$Purchase)
logPred <- predict(logFit, newdata = testing)
confusionMatrix(data = logPred, testing$Purchase)
## Compare Test Results
svmPred <- predict(svmFit3, newdata = testing, probability = TRUE)
confusionMatrix(data = svmPred, testing$Purchase)
logPred <- predict(logFit, newdata = testing)
confusionMatrix(data = logPred, testing$Purchase)
install.packages("sjPlot")
install.packages("sjPlot")
knitr::opts_chunk$set(echo = TRUE)
#Load Packages
list.of.packages <- c('mlbench','caret','ROCR','e1071','ggplot2','dataPreparation','sjPlot')
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=TRUE)
set.seed(99894)
##############
#Read In Data#
##############
df<-read.csv(url("http://data.mishra.us/files/OJ.csv"))
####################
#Quick Look at Data#
####################
summary(df)
############
#Clean Data#
############
F=c('WeekofPurchase', 'SpecialCH','SpecialMM','STORE','StoreID') # categorical variables are converted into factors
df$WeekofPurchase<-as.factor(df$WeekofPurchase)
df$SpecialCH<-as.factor(df$SpecialCH)
df$SpecialMM<-as.factor(df$SpecialMM)
df$STORE<-as.factor(df$STORE)
df$StoreID<-as.factor(df$StoreID)
inTraining <- createDataPartition(df$Purchase, p = .8, list = FALSE)
df$Purchase<-as.character(df$Purchase)
df$Purchase[df$Purchase=="MM"] <- 'Yes'
df$Purchase[df$Purchase=="CH"] <- 'No'
df$Purchase<-as.factor(df$Purchase)
##################################
#Check for Constants & Duplicates#
##################################
constant_cols <- whichAreConstant(df)
double_cols <- whichAreInDouble(df)
bijections_cols <- whichAreBijection(df)
df <-df [,-c('STORE','Store7','WeekofPurchase')]
##############################################
#Split Data into Testing and Training Dataset#
##############################################
training <- df[ inTraining,]
testing  <- df[-inTraining,]
##############
##Scale Data##
##############
scales <- build_scales(dataSet = training, cols = c("PriceCH", "PriceMM","DiscCH","DiscMM","SalePriceMM","SalePriceCH","PriceDiff","PctDiscMM","PctDiscCH","ListPriceDiff"), verbose = TRUE)
training <- fastScale(dataSet = training, scales = scales, verbose = TRUE)
testing <- fastScale(dataSet = testing, scales = scales, verbose = TRUE)
##############################
#Encode Categorical Variables#
##############################
encoding <- build_encoding(dataSet = training[,-c('Purchase')], cols = "auto", verbose = TRUE)
training <- one_hot_encoder(dataSet = training, encoding = encoding, drop = TRUE, verbose = TRUE)
testing <- one_hot_encoder(dataSet = testing, encoding = encoding, drop = TRUE, verbose = TRUE)
bijections_cols <- whichAreBijection(training)
training = training[,-c('SpecialCH.0','SpecialMM.0')]
testing = testing[,-c('SpecialCH.0','SpecialMM.0')]
training <- sameShape(training, referenceSet = testing, verbose = TRUE)
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 5,
## repeated ten times
repeats =2,
summaryFunction=twoClassSummary,
classProbs = TRUE)
#########################################
#Kernals using similar tuning parameters#
#########################################
###### SVM
svmFit1 <- train(Purchase ~ ., data = training,
method='svmRadial',
trControl = fitControl,
preProc = c("center","scale"),
metric = "ROC",
verbose = FALSE,
probability = TRUE,
tuneGrid = expand.grid(sigma = c(.01,.02,.05),
C = c(.75,1,1.5))
)
svmFit2 <- train(Purchase ~ ., data = training,
method='svmRadialCost',
trControl = fitControl,
preProc = c("center","scale"),
metric = "ROC",
verbose = FALSE,
probability = TRUE,
tuneGrid = expand.grid(
C = c(.75,1,1.5))
)
svmFit3 <- train(Purchase ~ ., data = training,
method='svmPoly',
trControl = fitControl,
preProc = c("center","scale"),
metric = "ROC",
verbose = FALSE,
probability = TRUE,
tuneGrid = expand.grid(degree = c(1,2,3),
C = c(.15,.2,.25),
scale = c(.5,.55,.6))
)
svmFit1
svmFit2
svmFit3
##### Logistic
logFit <- train(Purchase ~ PriceCH+PriceMM+DiscCH+DiscMM+LoyalCH+StoreID.1+StoreID.2+StoreID.3+StoreID.4,  data=training, method="glm", family="binomial",trControl = fitControl,metric = "ROC")
summary(logFit)
##### Logistic
logFit <- train(Purchase ~ PriceCH+PriceMM+DiscCH+DiscMM+LoyalCH+StoreID.1+StoreID.2+StoreID.3+StoreID.4,  data=training, method="glm", family="binomial",trControl = fitControl,metric = "ROC")
sjt.lm(logFit)
log_model<-glm(Purchase ~ PriceCH+PriceMM+DiscCH+DiscMM+LoyalCH+StoreID.1+StoreID.2+StoreID.3+StoreID.4,  data=training,family = binomial(link='logit'))
sjt.lm(log_model)
##### Logistic
logFit <- train(Purchase ~ PriceCH+PriceMM+DiscCH+DiscMM+LoyalCH+StoreID.1+StoreID.2+StoreID.3+StoreID.4,  data=training, method="glm", family="binomial",trControl = fitControl,metric = "ROC")
log_model<-glm(Purchase ~ PriceCH+PriceMM+DiscCH+DiscMM+LoyalCH+StoreID.1+StoreID.2+StoreID.3+StoreID.4,  data=training,family = binomial(link='logit'))
summary(logFit)
sjt.lm(log_model)
##### Logistic
logFit <- train(Purchase ~ PriceCH+PriceMM+DiscCH+DiscMM+LoyalCH+StoreID.1+StoreID.2+StoreID.3+StoreID.4,  data=training, method="glm", family="binomial",trControl = fitControl,metric = "ROC")
log_model<-glm(Purchase ~ PriceCH+PriceMM+DiscCH+DiscMM+LoyalCH+StoreID.1+StoreID.2+StoreID.3+StoreID.4,  data=training,family = binomial(link='logit'))
#summary(logFit)
sjt.lm(log_model)
summary(results)
bwplot(results)
svmFit1
summary(sv1)
summary(svFit1)
summary(svmFit1)
ggplot(data=df,aes(x=PriceMM,fill="orange"))+ geom_violin()
ggplot(data=df,aes(y=PriceMM,fill="orange"))+ geom_violin()
df<-read.csv(url("http://data.mishra.us/files/OJ.csv"))
df$WeekofPurchase<-as.factor(df$WeekofPurchase)
df$SpecialCH<-as.factor(df$SpecialCH)
df$SpecialMM<-as.factor(df$SpecialMM)
df$STORE<-as.factor(df$STORE)
df$StoreID<-as.factor(df$StoreID)
ggplot(data=df,aes(x="Minute Maid",y=PriceMM,fill="orange"))+ geom_violin()
ggplot(data=df,aes(x="Minute Maid",y=PriceMM,fill=Purchase))+ geom_violin()
ggplot(data=df,aes(x="Minute Maid",y=PriceMM,fill=Purchase))+
geom_violin() + geom_violin(aes(y=PriceCH))
ggplot(data=df,aes(x="Minute Maid",y=PriceMM,fill="orange"))+
geom_violin(fill="blue") + geom_violin(aes(y=PriceCH))
CH<-df[Purchase=="MM"]
CH<-subset(df,Purchase=="MM")
ggplot(data=df,aes(x=PriceCH,y=PriceMM,color=Purchase))+
geom_point(alpha=.2)
CH<-subset(df,Purchase=="MM")$
ggplot(data=df,aes(x=jitter(PriceCH,.05),y=jitter(PriceMM,.05),color=Purchase))+
geom_point(alpha=.2)
ggplot(data=df,aes(x=jitter(PriceCH,.05),y=jitter(PriceMM,.05),color=Purchase))+
geom_point(alpha=.2)
ggplot(data=df,aes(x=jitter(PriceCH,.1),y=jitter(PriceMM,.1),color=Purchase))+
geom_point(alpha=.2)
ggplot(data=df,aes(x=jitter(PriceCH,1),y=jitter(PriceMM,1),color=Purchase))+
geom_point(alpha=.2)
ggplot(data=df,aes(x=jitter(PriceCH,1),y=jitter(PriceMM,2),color=Purchase))+
geom_point(alpha=.2)
ggplot(data=df,aes(x=jitter(PriceCH,2),y=jitter(PriceMM,2),color=Purchase))+
geom_point(alpha=.2)+xlab("Citrus Hill Price")
ggplot(data=df,aes(x=jitter(PriceCH,2),y=jitter(PriceMM,2),color=Purchase))+
geom_point(alpha=.2)+xlab("Citrus Hill Price")+ylab("Minute Maid Price") +title("Purchase by Price")
ggplot(data=df,aes(x=jitter(PriceCH,2),y=jitter(PriceMM,2),color=Purchase))+
geom_point(alpha=.2)+xlab("Citrus Hill Price")+ylab("Minute Maid Price") +  ggtitle("Purchase by Price")
ggplot(data=df,aes(x=jitter(PriceCH,2),y=jitter(PriceMM,2),color=Purchase))+
geom_point(alpha=.2)+xlab("Citrus Hill Price")+ylab("Minute Maid Price") +  ggtitle("Purchase by Price")
ggplot(data=df,aes(x=jitter(SalePriceCH,2),y=jitter(SalePriceMM,2),color=Purchase))+
geom_point(alpha=.2)+xlab("Citrus Hill Price")+ylab("Minute Maid Price") +  ggtitle("Purchase by Sales Price")
ggplot(data=df,aes(x=jitter(PriceCH,2),y=jitter(PriceMM,2),color=Purchase))+
geom_point(alpha=.2)+xlab("Citrus Hill Price")+ylab("Minute Maid Price") +  ggtitle("Purchase by Price")
ggplot(data=df,aes(x=jitter(SalePriceCH,3),y=jitter(SalePriceMM,3),color=Purchase))+
geom_point(alpha=.2)+xlab("Citrus Hill Price")+ylab("Minute Maid Price") +  ggtitle("Purchase by Sales Price")
library(shiny)
library(ggplot2)
library(tidyverse)
library(reticulate)
myCamera <- callModule(shinyviewr,"myCamera", outputWidth = 500, outputHeight = 500)
runApp('devApps/AmISam')
shiny::runApp('devApps/AmISam')
